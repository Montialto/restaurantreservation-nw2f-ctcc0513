package restaurantreservation;

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;

class Reservation {
    String name;
    int partySize;
    String date;
    String time;

    public Reservation(String name, int partySize, String date, String time) {
        this.name = name;
        this.partySize = partySize;
        this.date = date;
        this.time = time;
    }

    @Override
    public String toString() {
        return "Name: " + name + ", Party Size: " + partySize + ", Date: " + date + ", Time: " + time;
    }
}

public class RestaurantReservation {
    static ArrayList<Reservation> reservationsList = new ArrayList<>();
    static Queue<Reservation> waitingQueue = new LinkedList<>();

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> createAndShowGUI());
    }

    private static void createAndShowGUI() {
        JFrame frame = new JFrame("Restaurant Reservation System");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(300, 200);

        JButton makeReservationButton = new JButton("Make Reservation");
        makeReservationButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                makeReservation();
            }
        });
        
        JButton serveCustomerButton = new JButton("Serve Customer");
        serveCustomerButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                serveCustomer();
            }
        });

        JButton viewReservationListButton = new JButton("View Reservation List");
        viewReservationListButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                viewReservationList();
            }
        });

        JButton exitButton = new JButton("Exit");
        exitButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                System.exit(0);
            }
        });

        JPanel panel = new JPanel();
        panel.add(makeReservationButton);
        panel.add(serveCustomerButton);
        panel.add(viewReservationListButton);
        panel.add(exitButton);

        frame.getContentPane().add(panel);
        frame.setVisible(true);
    }

    private static void makeReservation() {
        JTextField nameField = new JTextField();
        JTextField partySizeField = new JTextField();
        JTextField dateField = new JTextField();
        JTextField timeField = new JTextField();

        Object[] message = {
                "Name:", nameField,
                "Party Size:", partySizeField,
                "Date (MM/DD/YYYY):", dateField,
                "Time (HH:MM AM/PM):", timeField
        };

        int option = JOptionPane.showConfirmDialog(null, message, "Make Reservation", JOptionPane.OK_CANCEL_OPTION);

        if (option == JOptionPane.OK_OPTION) {
            String name = nameField.getText();
            int partySize = Integer.parseInt(partySizeField.getText());
            String date = dateField.getText();
            String time = timeField.getText();

            Reservation reservation = new Reservation(name, partySize, date, time);

            if (reservationsList.size() < 3) {
                reservationsList.add(reservation);
                JOptionPane.showMessageDialog(null, "Reservation confirmed!\n" + getReservationDetails(reservation));
            } else {
                waitingQueue.add(reservation);
                JOptionPane.showMessageDialog(null, "Sorry, the restaurant is full. Added to the waiting list.\n" + getReservationDetails(reservation));
            }
        }
    }

    private static void serveCustomer() {
        if (!reservationsList.isEmpty()) {
            Reservation reservation = reservationsList.remove(0);
            JOptionPane.showMessageDialog(null, "Serve Customer:\n" + getReservationDetails(reservation));
            if (!waitingQueue.isEmpty()) {
                Reservation waitingReservation = waitingQueue.poll();
                reservationsList.add(waitingReservation);
                JOptionPane.showMessageDialog(null, waitingReservation.name + " from the waiting list has been seated.\n" + getReservationDetails(waitingReservation));
            }
        } else {
            JOptionPane.showMessageDialog(null, "No reservations to seat.");
        }
    }

    private static void viewReservationList() {
        if (!reservationsList.isEmpty()) {
            StringBuilder list = new StringBuilder("Reservation List:\n");
            for (Reservation reservation : reservationsList) {
                list.append(getReservationDetails(reservation)).append("\n");
            }
            JOptionPane.showMessageDialog(null, list.toString());
        } else {
            JOptionPane.showMessageDialog(null, "No reservations yet.");
        }
    }

    private static String getReservationDetails(Reservation reservation) {
        return "Name: " + reservation.name + "\nParty Size: " + reservation.partySize + "\nDate: " + reservation.date + "\nTime: " + reservation.time + "\n";
    }
}
